/* eslint-disable */
// source: model.proto
/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.decomx.pantheon.ApproveOp', null, global);
goog.exportSymbol('proto.decomx.pantheon.Contact', null, global);
goog.exportSymbol('proto.decomx.pantheon.Contact.ContactType', null, global);
goog.exportSymbol('proto.decomx.pantheon.LinkedData', null, global);
goog.exportSymbol('proto.decomx.pantheon.LinkedData.DataType', null, global);
goog.exportSymbol('proto.decomx.pantheon.OwnerUpdateOp', null, global);
goog.exportSymbol('proto.decomx.pantheon.QuitOp', null, global);
goog.exportSymbol('proto.decomx.pantheon.RecallOp', null, global);
goog.exportSymbol('proto.decomx.pantheon.RejectOp', null, global);
goog.exportSymbol('proto.decomx.pantheon.RequestChangeOp', null, global);
goog.exportSymbol('proto.decomx.pantheon.RequestForFinalReviewOp', null, global);
goog.exportSymbol('proto.decomx.pantheon.Task', null, global);
goog.exportSymbol('proto.decomx.pantheon.Task.TaskStatus', null, global);
goog.exportSymbol('proto.decomx.pantheon.TaskOp', null, global);
goog.exportSymbol('proto.decomx.pantheon.TaskOp.TaskOpCase', null, global);
goog.exportSymbol('proto.decomx.pantheon.User', null, global);
goog.exportSymbol('proto.decomx.pantheon.WorkerAcceptOp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.decomx.pantheon.LinkedData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.decomx.pantheon.LinkedData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.decomx.pantheon.LinkedData.displayName = 'proto.decomx.pantheon.LinkedData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.decomx.pantheon.Contact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.decomx.pantheon.Contact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.decomx.pantheon.Contact.displayName = 'proto.decomx.pantheon.Contact';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.decomx.pantheon.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.decomx.pantheon.User.repeatedFields_, null);
};
goog.inherits(proto.decomx.pantheon.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.decomx.pantheon.User.displayName = 'proto.decomx.pantheon.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.decomx.pantheon.Task = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.decomx.pantheon.Task.repeatedFields_, null);
};
goog.inherits(proto.decomx.pantheon.Task, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.decomx.pantheon.Task.displayName = 'proto.decomx.pantheon.Task';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.decomx.pantheon.TaskOp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.decomx.pantheon.TaskOp.oneofGroups_);
};
goog.inherits(proto.decomx.pantheon.TaskOp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.decomx.pantheon.TaskOp.displayName = 'proto.decomx.pantheon.TaskOp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.decomx.pantheon.OwnerUpdateOp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.decomx.pantheon.OwnerUpdateOp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.decomx.pantheon.OwnerUpdateOp.displayName = 'proto.decomx.pantheon.OwnerUpdateOp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.decomx.pantheon.WorkerAcceptOp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.decomx.pantheon.WorkerAcceptOp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.decomx.pantheon.WorkerAcceptOp.displayName = 'proto.decomx.pantheon.WorkerAcceptOp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.decomx.pantheon.RequestChangeOp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.decomx.pantheon.RequestChangeOp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.decomx.pantheon.RequestChangeOp.displayName = 'proto.decomx.pantheon.RequestChangeOp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.decomx.pantheon.RequestForFinalReviewOp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.decomx.pantheon.RequestForFinalReviewOp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.decomx.pantheon.RequestForFinalReviewOp.displayName = 'proto.decomx.pantheon.RequestForFinalReviewOp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.decomx.pantheon.RecallOp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.decomx.pantheon.RecallOp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.decomx.pantheon.RecallOp.displayName = 'proto.decomx.pantheon.RecallOp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.decomx.pantheon.RejectOp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.decomx.pantheon.RejectOp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.decomx.pantheon.RejectOp.displayName = 'proto.decomx.pantheon.RejectOp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.decomx.pantheon.ApproveOp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.decomx.pantheon.ApproveOp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.decomx.pantheon.ApproveOp.displayName = 'proto.decomx.pantheon.ApproveOp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.decomx.pantheon.QuitOp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.decomx.pantheon.QuitOp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.decomx.pantheon.QuitOp.displayName = 'proto.decomx.pantheon.QuitOp';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.decomx.pantheon.LinkedData.prototype.toObject = function(opt_includeInstance) {
  return proto.decomx.pantheon.LinkedData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.decomx.pantheon.LinkedData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.LinkedData.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.decomx.pantheon.LinkedData}
 */
proto.decomx.pantheon.LinkedData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.decomx.pantheon.LinkedData;
  return proto.decomx.pantheon.LinkedData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.decomx.pantheon.LinkedData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.decomx.pantheon.LinkedData}
 */
proto.decomx.pantheon.LinkedData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.decomx.pantheon.LinkedData.DataType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.decomx.pantheon.LinkedData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.decomx.pantheon.LinkedData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.decomx.pantheon.LinkedData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.LinkedData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.decomx.pantheon.LinkedData.DataType = {
  PLAIN_TEXT: 0,
  IPFS_HASH: 1,
  WEB_URL: 2
};

/**
 * optional DataType type = 1;
 * @return {!proto.decomx.pantheon.LinkedData.DataType}
 */
proto.decomx.pantheon.LinkedData.prototype.getType = function() {
  return /** @type {!proto.decomx.pantheon.LinkedData.DataType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.decomx.pantheon.LinkedData.DataType} value
 * @return {!proto.decomx.pantheon.LinkedData} returns this
 */
proto.decomx.pantheon.LinkedData.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.decomx.pantheon.LinkedData.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.decomx.pantheon.LinkedData} returns this
 */
proto.decomx.pantheon.LinkedData.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.decomx.pantheon.Contact.prototype.toObject = function(opt_includeInstance) {
  return proto.decomx.pantheon.Contact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.decomx.pantheon.Contact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.Contact.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.decomx.pantheon.Contact}
 */
proto.decomx.pantheon.Contact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.decomx.pantheon.Contact;
  return proto.decomx.pantheon.Contact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.decomx.pantheon.Contact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.decomx.pantheon.Contact}
 */
proto.decomx.pantheon.Contact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.decomx.pantheon.Contact.ContactType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.decomx.pantheon.Contact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.decomx.pantheon.Contact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.decomx.pantheon.Contact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.Contact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.decomx.pantheon.Contact.ContactType = {
  PHONE: 0,
  EMAIL: 1,
  FACEBOOK: 2,
  WECHAT: 3,
  WHATSAPP: 4,
  DISCORD: 5,
  TELEGRAM: 6,
  OTHER: 7
};

/**
 * optional ContactType type = 1;
 * @return {!proto.decomx.pantheon.Contact.ContactType}
 */
proto.decomx.pantheon.Contact.prototype.getType = function() {
  return /** @type {!proto.decomx.pantheon.Contact.ContactType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.decomx.pantheon.Contact.ContactType} value
 * @return {!proto.decomx.pantheon.Contact} returns this
 */
proto.decomx.pantheon.Contact.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.decomx.pantheon.Contact.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.decomx.pantheon.Contact} returns this
 */
proto.decomx.pantheon.Contact.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.decomx.pantheon.User.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.decomx.pantheon.User.prototype.toObject = function(opt_includeInstance) {
  return proto.decomx.pantheon.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.decomx.pantheon.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    ethereumaddress: msg.getEthereumaddress_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    details: (f = msg.getDetails()) && proto.decomx.pantheon.LinkedData.toObject(includeInstance, f),
    contactList: jspb.Message.toObjectList(msg.getContactList(),
    proto.decomx.pantheon.Contact.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.decomx.pantheon.User}
 */
proto.decomx.pantheon.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.decomx.pantheon.User;
  return proto.decomx.pantheon.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.decomx.pantheon.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.decomx.pantheon.User}
 */
proto.decomx.pantheon.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEthereumaddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.decomx.pantheon.LinkedData;
      reader.readMessage(value,proto.decomx.pantheon.LinkedData.deserializeBinaryFromReader);
      msg.setDetails(value);
      break;
    case 4:
      var value = new proto.decomx.pantheon.Contact;
      reader.readMessage(value,proto.decomx.pantheon.Contact.deserializeBinaryFromReader);
      msg.addContact(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.decomx.pantheon.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.decomx.pantheon.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.decomx.pantheon.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEthereumaddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDetails();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.decomx.pantheon.LinkedData.serializeBinaryToWriter
    );
  }
  f = message.getContactList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.decomx.pantheon.Contact.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes ethereumAddress = 1;
 * @return {!(string|Uint8Array)}
 */
proto.decomx.pantheon.User.prototype.getEthereumaddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ethereumAddress = 1;
 * This is a type-conversion wrapper around `getEthereumaddress()`
 * @return {string}
 */
proto.decomx.pantheon.User.prototype.getEthereumaddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEthereumaddress()));
};


/**
 * optional bytes ethereumAddress = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEthereumaddress()`
 * @return {!Uint8Array}
 */
proto.decomx.pantheon.User.prototype.getEthereumaddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEthereumaddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.decomx.pantheon.User} returns this
 */
proto.decomx.pantheon.User.prototype.setEthereumaddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.decomx.pantheon.User.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.decomx.pantheon.User} returns this
 */
proto.decomx.pantheon.User.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional LinkedData details = 3;
 * @return {?proto.decomx.pantheon.LinkedData}
 */
proto.decomx.pantheon.User.prototype.getDetails = function() {
  return /** @type{?proto.decomx.pantheon.LinkedData} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.LinkedData, 3));
};


/**
 * @param {?proto.decomx.pantheon.LinkedData|undefined} value
 * @return {!proto.decomx.pantheon.User} returns this
*/
proto.decomx.pantheon.User.prototype.setDetails = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.User} returns this
 */
proto.decomx.pantheon.User.prototype.clearDetails = function() {
  return this.setDetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.User.prototype.hasDetails = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Contact contact = 4;
 * @return {!Array<!proto.decomx.pantheon.Contact>}
 */
proto.decomx.pantheon.User.prototype.getContactList = function() {
  return /** @type{!Array<!proto.decomx.pantheon.Contact>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.decomx.pantheon.Contact, 4));
};


/**
 * @param {!Array<!proto.decomx.pantheon.Contact>} value
 * @return {!proto.decomx.pantheon.User} returns this
*/
proto.decomx.pantheon.User.prototype.setContactList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.decomx.pantheon.Contact=} opt_value
 * @param {number=} opt_index
 * @return {!proto.decomx.pantheon.Contact}
 */
proto.decomx.pantheon.User.prototype.addContact = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.decomx.pantheon.Contact, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.decomx.pantheon.User} returns this
 */
proto.decomx.pantheon.User.prototype.clearContactList = function() {
  return this.setContactList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.decomx.pantheon.Task.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.decomx.pantheon.Task.prototype.toObject = function(opt_includeInstance) {
  return proto.decomx.pantheon.Task.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.decomx.pantheon.Task} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.Task.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = msg.getOwner()) && proto.decomx.pantheon.User.toObject(includeInstance, f),
    worker: (f = msg.getWorker()) && proto.decomx.pantheon.User.toObject(includeInstance, f),
    opList: jspb.Message.toObjectList(msg.getOpList(),
    proto.decomx.pantheon.TaskOp.toObject, includeInstance),
    taskdetails: (f = msg.getTaskdetails()) && proto.decomx.pantheon.LinkedData.toObject(includeInstance, f),
    proofofwork: (f = msg.getProofofwork()) && proto.decomx.pantheon.LinkedData.toObject(includeInstance, f),
    ownerdeposit: jspb.Message.getFieldWithDefault(msg, 6, 0),
    workerdeposit: jspb.Message.getFieldWithDefault(msg, 7, 0),
    finishdeadline: jspb.Message.getFieldWithDefault(msg, 8, 0),
    reviewdeadline: jspb.Message.getFieldWithDefault(msg, 9, 0),
    status: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.decomx.pantheon.Task}
 */
proto.decomx.pantheon.Task.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.decomx.pantheon.Task;
  return proto.decomx.pantheon.Task.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.decomx.pantheon.Task} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.decomx.pantheon.Task}
 */
proto.decomx.pantheon.Task.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.decomx.pantheon.User;
      reader.readMessage(value,proto.decomx.pantheon.User.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 2:
      var value = new proto.decomx.pantheon.User;
      reader.readMessage(value,proto.decomx.pantheon.User.deserializeBinaryFromReader);
      msg.setWorker(value);
      break;
    case 3:
      var value = new proto.decomx.pantheon.TaskOp;
      reader.readMessage(value,proto.decomx.pantheon.TaskOp.deserializeBinaryFromReader);
      msg.addOp(value);
      break;
    case 4:
      var value = new proto.decomx.pantheon.LinkedData;
      reader.readMessage(value,proto.decomx.pantheon.LinkedData.deserializeBinaryFromReader);
      msg.setTaskdetails(value);
      break;
    case 5:
      var value = new proto.decomx.pantheon.LinkedData;
      reader.readMessage(value,proto.decomx.pantheon.LinkedData.deserializeBinaryFromReader);
      msg.setProofofwork(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOwnerdeposit(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWorkerdeposit(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFinishdeadline(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReviewdeadline(value);
      break;
    case 10:
      var value = /** @type {!proto.decomx.pantheon.Task.TaskStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.decomx.pantheon.Task.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.decomx.pantheon.Task.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.decomx.pantheon.Task} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.Task.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.decomx.pantheon.User.serializeBinaryToWriter
    );
  }
  f = message.getWorker();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.decomx.pantheon.User.serializeBinaryToWriter
    );
  }
  f = message.getOpList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.decomx.pantheon.TaskOp.serializeBinaryToWriter
    );
  }
  f = message.getTaskdetails();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.decomx.pantheon.LinkedData.serializeBinaryToWriter
    );
  }
  f = message.getProofofwork();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.decomx.pantheon.LinkedData.serializeBinaryToWriter
    );
  }
  f = message.getOwnerdeposit();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getWorkerdeposit();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getFinishdeadline();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getReviewdeadline();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.decomx.pantheon.Task.TaskStatus = {
  PENDING_ACCEPT: 0,
  PENDING_WORKER_PROOF: 1,
  PENDING_CHANGE_REVIEW: 2,
  PENDING_FINAL_REVIEW: 3,
  CLOSED: 4
};

/**
 * optional User owner = 1;
 * @return {?proto.decomx.pantheon.User}
 */
proto.decomx.pantheon.Task.prototype.getOwner = function() {
  return /** @type{?proto.decomx.pantheon.User} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.User, 1));
};


/**
 * @param {?proto.decomx.pantheon.User|undefined} value
 * @return {!proto.decomx.pantheon.Task} returns this
*/
proto.decomx.pantheon.Task.prototype.setOwner = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.Task} returns this
 */
proto.decomx.pantheon.Task.prototype.clearOwner = function() {
  return this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.Task.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional User worker = 2;
 * @return {?proto.decomx.pantheon.User}
 */
proto.decomx.pantheon.Task.prototype.getWorker = function() {
  return /** @type{?proto.decomx.pantheon.User} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.User, 2));
};


/**
 * @param {?proto.decomx.pantheon.User|undefined} value
 * @return {!proto.decomx.pantheon.Task} returns this
*/
proto.decomx.pantheon.Task.prototype.setWorker = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.Task} returns this
 */
proto.decomx.pantheon.Task.prototype.clearWorker = function() {
  return this.setWorker(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.Task.prototype.hasWorker = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated TaskOp op = 3;
 * @return {!Array<!proto.decomx.pantheon.TaskOp>}
 */
proto.decomx.pantheon.Task.prototype.getOpList = function() {
  return /** @type{!Array<!proto.decomx.pantheon.TaskOp>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.decomx.pantheon.TaskOp, 3));
};


/**
 * @param {!Array<!proto.decomx.pantheon.TaskOp>} value
 * @return {!proto.decomx.pantheon.Task} returns this
*/
proto.decomx.pantheon.Task.prototype.setOpList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.decomx.pantheon.TaskOp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.decomx.pantheon.TaskOp}
 */
proto.decomx.pantheon.Task.prototype.addOp = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.decomx.pantheon.TaskOp, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.decomx.pantheon.Task} returns this
 */
proto.decomx.pantheon.Task.prototype.clearOpList = function() {
  return this.setOpList([]);
};


/**
 * optional LinkedData taskDetails = 4;
 * @return {?proto.decomx.pantheon.LinkedData}
 */
proto.decomx.pantheon.Task.prototype.getTaskdetails = function() {
  return /** @type{?proto.decomx.pantheon.LinkedData} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.LinkedData, 4));
};


/**
 * @param {?proto.decomx.pantheon.LinkedData|undefined} value
 * @return {!proto.decomx.pantheon.Task} returns this
*/
proto.decomx.pantheon.Task.prototype.setTaskdetails = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.Task} returns this
 */
proto.decomx.pantheon.Task.prototype.clearTaskdetails = function() {
  return this.setTaskdetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.Task.prototype.hasTaskdetails = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional LinkedData proofOfWork = 5;
 * @return {?proto.decomx.pantheon.LinkedData}
 */
proto.decomx.pantheon.Task.prototype.getProofofwork = function() {
  return /** @type{?proto.decomx.pantheon.LinkedData} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.LinkedData, 5));
};


/**
 * @param {?proto.decomx.pantheon.LinkedData|undefined} value
 * @return {!proto.decomx.pantheon.Task} returns this
*/
proto.decomx.pantheon.Task.prototype.setProofofwork = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.Task} returns this
 */
proto.decomx.pantheon.Task.prototype.clearProofofwork = function() {
  return this.setProofofwork(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.Task.prototype.hasProofofwork = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 ownerDeposit = 6;
 * @return {number}
 */
proto.decomx.pantheon.Task.prototype.getOwnerdeposit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.decomx.pantheon.Task} returns this
 */
proto.decomx.pantheon.Task.prototype.setOwnerdeposit = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 workerDeposit = 7;
 * @return {number}
 */
proto.decomx.pantheon.Task.prototype.getWorkerdeposit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.decomx.pantheon.Task} returns this
 */
proto.decomx.pantheon.Task.prototype.setWorkerdeposit = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 finishDeadline = 8;
 * @return {number}
 */
proto.decomx.pantheon.Task.prototype.getFinishdeadline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.decomx.pantheon.Task} returns this
 */
proto.decomx.pantheon.Task.prototype.setFinishdeadline = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 reviewDeadline = 9;
 * @return {number}
 */
proto.decomx.pantheon.Task.prototype.getReviewdeadline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.decomx.pantheon.Task} returns this
 */
proto.decomx.pantheon.Task.prototype.setReviewdeadline = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional TaskStatus status = 10;
 * @return {!proto.decomx.pantheon.Task.TaskStatus}
 */
proto.decomx.pantheon.Task.prototype.getStatus = function() {
  return /** @type {!proto.decomx.pantheon.Task.TaskStatus} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.decomx.pantheon.Task.TaskStatus} value
 * @return {!proto.decomx.pantheon.Task} returns this
 */
proto.decomx.pantheon.Task.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.decomx.pantheon.TaskOp.oneofGroups_ = [[1,2,3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.decomx.pantheon.TaskOp.TaskOpCase = {
  TASK_OP_NOT_SET: 0,
  OWNERUPDATE: 1,
  WORKERACCEPT: 2,
  REQUESTCHANGE: 3,
  REQUESTFORFINALREVIEW: 4,
  RECALL: 5,
  REJECT: 6,
  APPROVE: 7,
  QUIT: 8
};

/**
 * @return {proto.decomx.pantheon.TaskOp.TaskOpCase}
 */
proto.decomx.pantheon.TaskOp.prototype.getTaskOpCase = function() {
  return /** @type {proto.decomx.pantheon.TaskOp.TaskOpCase} */(jspb.Message.computeOneofCase(this, proto.decomx.pantheon.TaskOp.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.decomx.pantheon.TaskOp.prototype.toObject = function(opt_includeInstance) {
  return proto.decomx.pantheon.TaskOp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.decomx.pantheon.TaskOp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.TaskOp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ownerupdate: (f = msg.getOwnerupdate()) && proto.decomx.pantheon.OwnerUpdateOp.toObject(includeInstance, f),
    workeraccept: (f = msg.getWorkeraccept()) && proto.decomx.pantheon.WorkerAcceptOp.toObject(includeInstance, f),
    requestchange: (f = msg.getRequestchange()) && proto.decomx.pantheon.RequestChangeOp.toObject(includeInstance, f),
    requestforfinalreview: (f = msg.getRequestforfinalreview()) && proto.decomx.pantheon.RequestForFinalReviewOp.toObject(includeInstance, f),
    recall: (f = msg.getRecall()) && proto.decomx.pantheon.RecallOp.toObject(includeInstance, f),
    reject: (f = msg.getReject()) && proto.decomx.pantheon.RejectOp.toObject(includeInstance, f),
    approve: (f = msg.getApprove()) && proto.decomx.pantheon.ApproveOp.toObject(includeInstance, f),
    quit: (f = msg.getQuit()) && proto.decomx.pantheon.QuitOp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.decomx.pantheon.TaskOp}
 */
proto.decomx.pantheon.TaskOp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.decomx.pantheon.TaskOp;
  return proto.decomx.pantheon.TaskOp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.decomx.pantheon.TaskOp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.decomx.pantheon.TaskOp}
 */
proto.decomx.pantheon.TaskOp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.decomx.pantheon.OwnerUpdateOp;
      reader.readMessage(value,proto.decomx.pantheon.OwnerUpdateOp.deserializeBinaryFromReader);
      msg.setOwnerupdate(value);
      break;
    case 2:
      var value = new proto.decomx.pantheon.WorkerAcceptOp;
      reader.readMessage(value,proto.decomx.pantheon.WorkerAcceptOp.deserializeBinaryFromReader);
      msg.setWorkeraccept(value);
      break;
    case 3:
      var value = new proto.decomx.pantheon.RequestChangeOp;
      reader.readMessage(value,proto.decomx.pantheon.RequestChangeOp.deserializeBinaryFromReader);
      msg.setRequestchange(value);
      break;
    case 4:
      var value = new proto.decomx.pantheon.RequestForFinalReviewOp;
      reader.readMessage(value,proto.decomx.pantheon.RequestForFinalReviewOp.deserializeBinaryFromReader);
      msg.setRequestforfinalreview(value);
      break;
    case 5:
      var value = new proto.decomx.pantheon.RecallOp;
      reader.readMessage(value,proto.decomx.pantheon.RecallOp.deserializeBinaryFromReader);
      msg.setRecall(value);
      break;
    case 6:
      var value = new proto.decomx.pantheon.RejectOp;
      reader.readMessage(value,proto.decomx.pantheon.RejectOp.deserializeBinaryFromReader);
      msg.setReject(value);
      break;
    case 7:
      var value = new proto.decomx.pantheon.ApproveOp;
      reader.readMessage(value,proto.decomx.pantheon.ApproveOp.deserializeBinaryFromReader);
      msg.setApprove(value);
      break;
    case 8:
      var value = new proto.decomx.pantheon.QuitOp;
      reader.readMessage(value,proto.decomx.pantheon.QuitOp.deserializeBinaryFromReader);
      msg.setQuit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.decomx.pantheon.TaskOp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.decomx.pantheon.TaskOp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.decomx.pantheon.TaskOp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.TaskOp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwnerupdate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.decomx.pantheon.OwnerUpdateOp.serializeBinaryToWriter
    );
  }
  f = message.getWorkeraccept();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.decomx.pantheon.WorkerAcceptOp.serializeBinaryToWriter
    );
  }
  f = message.getRequestchange();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.decomx.pantheon.RequestChangeOp.serializeBinaryToWriter
    );
  }
  f = message.getRequestforfinalreview();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.decomx.pantheon.RequestForFinalReviewOp.serializeBinaryToWriter
    );
  }
  f = message.getRecall();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.decomx.pantheon.RecallOp.serializeBinaryToWriter
    );
  }
  f = message.getReject();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.decomx.pantheon.RejectOp.serializeBinaryToWriter
    );
  }
  f = message.getApprove();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.decomx.pantheon.ApproveOp.serializeBinaryToWriter
    );
  }
  f = message.getQuit();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.decomx.pantheon.QuitOp.serializeBinaryToWriter
    );
  }
};


/**
 * optional OwnerUpdateOp ownerUpdate = 1;
 * @return {?proto.decomx.pantheon.OwnerUpdateOp}
 */
proto.decomx.pantheon.TaskOp.prototype.getOwnerupdate = function() {
  return /** @type{?proto.decomx.pantheon.OwnerUpdateOp} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.OwnerUpdateOp, 1));
};


/**
 * @param {?proto.decomx.pantheon.OwnerUpdateOp|undefined} value
 * @return {!proto.decomx.pantheon.TaskOp} returns this
*/
proto.decomx.pantheon.TaskOp.prototype.setOwnerupdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.decomx.pantheon.TaskOp.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.TaskOp} returns this
 */
proto.decomx.pantheon.TaskOp.prototype.clearOwnerupdate = function() {
  return this.setOwnerupdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.TaskOp.prototype.hasOwnerupdate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional WorkerAcceptOp workerAccept = 2;
 * @return {?proto.decomx.pantheon.WorkerAcceptOp}
 */
proto.decomx.pantheon.TaskOp.prototype.getWorkeraccept = function() {
  return /** @type{?proto.decomx.pantheon.WorkerAcceptOp} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.WorkerAcceptOp, 2));
};


/**
 * @param {?proto.decomx.pantheon.WorkerAcceptOp|undefined} value
 * @return {!proto.decomx.pantheon.TaskOp} returns this
*/
proto.decomx.pantheon.TaskOp.prototype.setWorkeraccept = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.decomx.pantheon.TaskOp.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.TaskOp} returns this
 */
proto.decomx.pantheon.TaskOp.prototype.clearWorkeraccept = function() {
  return this.setWorkeraccept(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.TaskOp.prototype.hasWorkeraccept = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RequestChangeOp requestChange = 3;
 * @return {?proto.decomx.pantheon.RequestChangeOp}
 */
proto.decomx.pantheon.TaskOp.prototype.getRequestchange = function() {
  return /** @type{?proto.decomx.pantheon.RequestChangeOp} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.RequestChangeOp, 3));
};


/**
 * @param {?proto.decomx.pantheon.RequestChangeOp|undefined} value
 * @return {!proto.decomx.pantheon.TaskOp} returns this
*/
proto.decomx.pantheon.TaskOp.prototype.setRequestchange = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.decomx.pantheon.TaskOp.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.TaskOp} returns this
 */
proto.decomx.pantheon.TaskOp.prototype.clearRequestchange = function() {
  return this.setRequestchange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.TaskOp.prototype.hasRequestchange = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RequestForFinalReviewOp requestForFinalReview = 4;
 * @return {?proto.decomx.pantheon.RequestForFinalReviewOp}
 */
proto.decomx.pantheon.TaskOp.prototype.getRequestforfinalreview = function() {
  return /** @type{?proto.decomx.pantheon.RequestForFinalReviewOp} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.RequestForFinalReviewOp, 4));
};


/**
 * @param {?proto.decomx.pantheon.RequestForFinalReviewOp|undefined} value
 * @return {!proto.decomx.pantheon.TaskOp} returns this
*/
proto.decomx.pantheon.TaskOp.prototype.setRequestforfinalreview = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.decomx.pantheon.TaskOp.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.TaskOp} returns this
 */
proto.decomx.pantheon.TaskOp.prototype.clearRequestforfinalreview = function() {
  return this.setRequestforfinalreview(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.TaskOp.prototype.hasRequestforfinalreview = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RecallOp recall = 5;
 * @return {?proto.decomx.pantheon.RecallOp}
 */
proto.decomx.pantheon.TaskOp.prototype.getRecall = function() {
  return /** @type{?proto.decomx.pantheon.RecallOp} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.RecallOp, 5));
};


/**
 * @param {?proto.decomx.pantheon.RecallOp|undefined} value
 * @return {!proto.decomx.pantheon.TaskOp} returns this
*/
proto.decomx.pantheon.TaskOp.prototype.setRecall = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.decomx.pantheon.TaskOp.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.TaskOp} returns this
 */
proto.decomx.pantheon.TaskOp.prototype.clearRecall = function() {
  return this.setRecall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.TaskOp.prototype.hasRecall = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RejectOp reject = 6;
 * @return {?proto.decomx.pantheon.RejectOp}
 */
proto.decomx.pantheon.TaskOp.prototype.getReject = function() {
  return /** @type{?proto.decomx.pantheon.RejectOp} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.RejectOp, 6));
};


/**
 * @param {?proto.decomx.pantheon.RejectOp|undefined} value
 * @return {!proto.decomx.pantheon.TaskOp} returns this
*/
proto.decomx.pantheon.TaskOp.prototype.setReject = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.decomx.pantheon.TaskOp.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.TaskOp} returns this
 */
proto.decomx.pantheon.TaskOp.prototype.clearReject = function() {
  return this.setReject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.TaskOp.prototype.hasReject = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ApproveOp approve = 7;
 * @return {?proto.decomx.pantheon.ApproveOp}
 */
proto.decomx.pantheon.TaskOp.prototype.getApprove = function() {
  return /** @type{?proto.decomx.pantheon.ApproveOp} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.ApproveOp, 7));
};


/**
 * @param {?proto.decomx.pantheon.ApproveOp|undefined} value
 * @return {!proto.decomx.pantheon.TaskOp} returns this
*/
proto.decomx.pantheon.TaskOp.prototype.setApprove = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.decomx.pantheon.TaskOp.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.TaskOp} returns this
 */
proto.decomx.pantheon.TaskOp.prototype.clearApprove = function() {
  return this.setApprove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.TaskOp.prototype.hasApprove = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional QuitOp quit = 8;
 * @return {?proto.decomx.pantheon.QuitOp}
 */
proto.decomx.pantheon.TaskOp.prototype.getQuit = function() {
  return /** @type{?proto.decomx.pantheon.QuitOp} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.QuitOp, 8));
};


/**
 * @param {?proto.decomx.pantheon.QuitOp|undefined} value
 * @return {!proto.decomx.pantheon.TaskOp} returns this
*/
proto.decomx.pantheon.TaskOp.prototype.setQuit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.decomx.pantheon.TaskOp.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.TaskOp} returns this
 */
proto.decomx.pantheon.TaskOp.prototype.clearQuit = function() {
  return this.setQuit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.TaskOp.prototype.hasQuit = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.decomx.pantheon.OwnerUpdateOp.prototype.toObject = function(opt_includeInstance) {
  return proto.decomx.pantheon.OwnerUpdateOp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.decomx.pantheon.OwnerUpdateOp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.OwnerUpdateOp.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    comment: (f = msg.getComment()) && proto.decomx.pantheon.LinkedData.toObject(includeInstance, f),
    taskdetails: (f = msg.getTaskdetails()) && proto.decomx.pantheon.LinkedData.toObject(includeInstance, f),
    ownerdeposit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    workerdeposit: jspb.Message.getFieldWithDefault(msg, 5, 0),
    finishdeadline: jspb.Message.getFieldWithDefault(msg, 6, 0),
    reviewdeadline: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.decomx.pantheon.OwnerUpdateOp}
 */
proto.decomx.pantheon.OwnerUpdateOp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.decomx.pantheon.OwnerUpdateOp;
  return proto.decomx.pantheon.OwnerUpdateOp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.decomx.pantheon.OwnerUpdateOp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.decomx.pantheon.OwnerUpdateOp}
 */
proto.decomx.pantheon.OwnerUpdateOp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = new proto.decomx.pantheon.LinkedData;
      reader.readMessage(value,proto.decomx.pantheon.LinkedData.deserializeBinaryFromReader);
      msg.setComment(value);
      break;
    case 3:
      var value = new proto.decomx.pantheon.LinkedData;
      reader.readMessage(value,proto.decomx.pantheon.LinkedData.deserializeBinaryFromReader);
      msg.setTaskdetails(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOwnerdeposit(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWorkerdeposit(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFinishdeadline(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReviewdeadline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.decomx.pantheon.OwnerUpdateOp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.decomx.pantheon.OwnerUpdateOp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.decomx.pantheon.OwnerUpdateOp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.OwnerUpdateOp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getComment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.decomx.pantheon.LinkedData.serializeBinaryToWriter
    );
  }
  f = message.getTaskdetails();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.decomx.pantheon.LinkedData.serializeBinaryToWriter
    );
  }
  f = message.getOwnerdeposit();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getWorkerdeposit();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getFinishdeadline();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getReviewdeadline();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.decomx.pantheon.OwnerUpdateOp.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.decomx.pantheon.OwnerUpdateOp} returns this
 */
proto.decomx.pantheon.OwnerUpdateOp.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional LinkedData comment = 2;
 * @return {?proto.decomx.pantheon.LinkedData}
 */
proto.decomx.pantheon.OwnerUpdateOp.prototype.getComment = function() {
  return /** @type{?proto.decomx.pantheon.LinkedData} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.LinkedData, 2));
};


/**
 * @param {?proto.decomx.pantheon.LinkedData|undefined} value
 * @return {!proto.decomx.pantheon.OwnerUpdateOp} returns this
*/
proto.decomx.pantheon.OwnerUpdateOp.prototype.setComment = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.OwnerUpdateOp} returns this
 */
proto.decomx.pantheon.OwnerUpdateOp.prototype.clearComment = function() {
  return this.setComment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.OwnerUpdateOp.prototype.hasComment = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LinkedData taskDetails = 3;
 * @return {?proto.decomx.pantheon.LinkedData}
 */
proto.decomx.pantheon.OwnerUpdateOp.prototype.getTaskdetails = function() {
  return /** @type{?proto.decomx.pantheon.LinkedData} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.LinkedData, 3));
};


/**
 * @param {?proto.decomx.pantheon.LinkedData|undefined} value
 * @return {!proto.decomx.pantheon.OwnerUpdateOp} returns this
*/
proto.decomx.pantheon.OwnerUpdateOp.prototype.setTaskdetails = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.OwnerUpdateOp} returns this
 */
proto.decomx.pantheon.OwnerUpdateOp.prototype.clearTaskdetails = function() {
  return this.setTaskdetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.OwnerUpdateOp.prototype.hasTaskdetails = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 ownerDeposit = 4;
 * @return {number}
 */
proto.decomx.pantheon.OwnerUpdateOp.prototype.getOwnerdeposit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.decomx.pantheon.OwnerUpdateOp} returns this
 */
proto.decomx.pantheon.OwnerUpdateOp.prototype.setOwnerdeposit = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 workerDeposit = 5;
 * @return {number}
 */
proto.decomx.pantheon.OwnerUpdateOp.prototype.getWorkerdeposit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.decomx.pantheon.OwnerUpdateOp} returns this
 */
proto.decomx.pantheon.OwnerUpdateOp.prototype.setWorkerdeposit = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 finishDeadline = 6;
 * @return {number}
 */
proto.decomx.pantheon.OwnerUpdateOp.prototype.getFinishdeadline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.decomx.pantheon.OwnerUpdateOp} returns this
 */
proto.decomx.pantheon.OwnerUpdateOp.prototype.setFinishdeadline = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 reviewDeadline = 7;
 * @return {number}
 */
proto.decomx.pantheon.OwnerUpdateOp.prototype.getReviewdeadline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.decomx.pantheon.OwnerUpdateOp} returns this
 */
proto.decomx.pantheon.OwnerUpdateOp.prototype.setReviewdeadline = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.decomx.pantheon.WorkerAcceptOp.prototype.toObject = function(opt_includeInstance) {
  return proto.decomx.pantheon.WorkerAcceptOp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.decomx.pantheon.WorkerAcceptOp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.WorkerAcceptOp.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    comment: (f = msg.getComment()) && proto.decomx.pantheon.LinkedData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.decomx.pantheon.WorkerAcceptOp}
 */
proto.decomx.pantheon.WorkerAcceptOp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.decomx.pantheon.WorkerAcceptOp;
  return proto.decomx.pantheon.WorkerAcceptOp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.decomx.pantheon.WorkerAcceptOp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.decomx.pantheon.WorkerAcceptOp}
 */
proto.decomx.pantheon.WorkerAcceptOp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = new proto.decomx.pantheon.LinkedData;
      reader.readMessage(value,proto.decomx.pantheon.LinkedData.deserializeBinaryFromReader);
      msg.setComment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.decomx.pantheon.WorkerAcceptOp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.decomx.pantheon.WorkerAcceptOp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.decomx.pantheon.WorkerAcceptOp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.WorkerAcceptOp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getComment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.decomx.pantheon.LinkedData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.decomx.pantheon.WorkerAcceptOp.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.decomx.pantheon.WorkerAcceptOp} returns this
 */
proto.decomx.pantheon.WorkerAcceptOp.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional LinkedData comment = 2;
 * @return {?proto.decomx.pantheon.LinkedData}
 */
proto.decomx.pantheon.WorkerAcceptOp.prototype.getComment = function() {
  return /** @type{?proto.decomx.pantheon.LinkedData} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.LinkedData, 2));
};


/**
 * @param {?proto.decomx.pantheon.LinkedData|undefined} value
 * @return {!proto.decomx.pantheon.WorkerAcceptOp} returns this
*/
proto.decomx.pantheon.WorkerAcceptOp.prototype.setComment = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.WorkerAcceptOp} returns this
 */
proto.decomx.pantheon.WorkerAcceptOp.prototype.clearComment = function() {
  return this.setComment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.WorkerAcceptOp.prototype.hasComment = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.decomx.pantheon.RequestChangeOp.prototype.toObject = function(opt_includeInstance) {
  return proto.decomx.pantheon.RequestChangeOp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.decomx.pantheon.RequestChangeOp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.RequestChangeOp.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    comment: (f = msg.getComment()) && proto.decomx.pantheon.LinkedData.toObject(includeInstance, f),
    taskdetails: (f = msg.getTaskdetails()) && proto.decomx.pantheon.LinkedData.toObject(includeInstance, f),
    ownerdeposit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    workerdeposit: jspb.Message.getFieldWithDefault(msg, 5, 0),
    finishdeadline: jspb.Message.getFieldWithDefault(msg, 6, 0),
    reviewdeadline: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.decomx.pantheon.RequestChangeOp}
 */
proto.decomx.pantheon.RequestChangeOp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.decomx.pantheon.RequestChangeOp;
  return proto.decomx.pantheon.RequestChangeOp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.decomx.pantheon.RequestChangeOp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.decomx.pantheon.RequestChangeOp}
 */
proto.decomx.pantheon.RequestChangeOp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = new proto.decomx.pantheon.LinkedData;
      reader.readMessage(value,proto.decomx.pantheon.LinkedData.deserializeBinaryFromReader);
      msg.setComment(value);
      break;
    case 3:
      var value = new proto.decomx.pantheon.LinkedData;
      reader.readMessage(value,proto.decomx.pantheon.LinkedData.deserializeBinaryFromReader);
      msg.setTaskdetails(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOwnerdeposit(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setWorkerdeposit(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFinishdeadline(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReviewdeadline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.decomx.pantheon.RequestChangeOp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.decomx.pantheon.RequestChangeOp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.decomx.pantheon.RequestChangeOp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.RequestChangeOp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getComment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.decomx.pantheon.LinkedData.serializeBinaryToWriter
    );
  }
  f = message.getTaskdetails();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.decomx.pantheon.LinkedData.serializeBinaryToWriter
    );
  }
  f = message.getOwnerdeposit();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getWorkerdeposit();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getFinishdeadline();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getReviewdeadline();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.decomx.pantheon.RequestChangeOp.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.decomx.pantheon.RequestChangeOp} returns this
 */
proto.decomx.pantheon.RequestChangeOp.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional LinkedData comment = 2;
 * @return {?proto.decomx.pantheon.LinkedData}
 */
proto.decomx.pantheon.RequestChangeOp.prototype.getComment = function() {
  return /** @type{?proto.decomx.pantheon.LinkedData} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.LinkedData, 2));
};


/**
 * @param {?proto.decomx.pantheon.LinkedData|undefined} value
 * @return {!proto.decomx.pantheon.RequestChangeOp} returns this
*/
proto.decomx.pantheon.RequestChangeOp.prototype.setComment = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.RequestChangeOp} returns this
 */
proto.decomx.pantheon.RequestChangeOp.prototype.clearComment = function() {
  return this.setComment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.RequestChangeOp.prototype.hasComment = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LinkedData taskDetails = 3;
 * @return {?proto.decomx.pantheon.LinkedData}
 */
proto.decomx.pantheon.RequestChangeOp.prototype.getTaskdetails = function() {
  return /** @type{?proto.decomx.pantheon.LinkedData} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.LinkedData, 3));
};


/**
 * @param {?proto.decomx.pantheon.LinkedData|undefined} value
 * @return {!proto.decomx.pantheon.RequestChangeOp} returns this
*/
proto.decomx.pantheon.RequestChangeOp.prototype.setTaskdetails = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.RequestChangeOp} returns this
 */
proto.decomx.pantheon.RequestChangeOp.prototype.clearTaskdetails = function() {
  return this.setTaskdetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.RequestChangeOp.prototype.hasTaskdetails = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 ownerDeposit = 4;
 * @return {number}
 */
proto.decomx.pantheon.RequestChangeOp.prototype.getOwnerdeposit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.decomx.pantheon.RequestChangeOp} returns this
 */
proto.decomx.pantheon.RequestChangeOp.prototype.setOwnerdeposit = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 workerDeposit = 5;
 * @return {number}
 */
proto.decomx.pantheon.RequestChangeOp.prototype.getWorkerdeposit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.decomx.pantheon.RequestChangeOp} returns this
 */
proto.decomx.pantheon.RequestChangeOp.prototype.setWorkerdeposit = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 finishDeadline = 6;
 * @return {number}
 */
proto.decomx.pantheon.RequestChangeOp.prototype.getFinishdeadline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.decomx.pantheon.RequestChangeOp} returns this
 */
proto.decomx.pantheon.RequestChangeOp.prototype.setFinishdeadline = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 reviewDeadline = 7;
 * @return {number}
 */
proto.decomx.pantheon.RequestChangeOp.prototype.getReviewdeadline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.decomx.pantheon.RequestChangeOp} returns this
 */
proto.decomx.pantheon.RequestChangeOp.prototype.setReviewdeadline = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.decomx.pantheon.RequestForFinalReviewOp.prototype.toObject = function(opt_includeInstance) {
  return proto.decomx.pantheon.RequestForFinalReviewOp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.decomx.pantheon.RequestForFinalReviewOp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.RequestForFinalReviewOp.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    comment: (f = msg.getComment()) && proto.decomx.pantheon.LinkedData.toObject(includeInstance, f),
    proofofwork: (f = msg.getProofofwork()) && proto.decomx.pantheon.LinkedData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.decomx.pantheon.RequestForFinalReviewOp}
 */
proto.decomx.pantheon.RequestForFinalReviewOp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.decomx.pantheon.RequestForFinalReviewOp;
  return proto.decomx.pantheon.RequestForFinalReviewOp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.decomx.pantheon.RequestForFinalReviewOp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.decomx.pantheon.RequestForFinalReviewOp}
 */
proto.decomx.pantheon.RequestForFinalReviewOp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = new proto.decomx.pantheon.LinkedData;
      reader.readMessage(value,proto.decomx.pantheon.LinkedData.deserializeBinaryFromReader);
      msg.setComment(value);
      break;
    case 3:
      var value = new proto.decomx.pantheon.LinkedData;
      reader.readMessage(value,proto.decomx.pantheon.LinkedData.deserializeBinaryFromReader);
      msg.setProofofwork(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.decomx.pantheon.RequestForFinalReviewOp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.decomx.pantheon.RequestForFinalReviewOp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.decomx.pantheon.RequestForFinalReviewOp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.RequestForFinalReviewOp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getComment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.decomx.pantheon.LinkedData.serializeBinaryToWriter
    );
  }
  f = message.getProofofwork();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.decomx.pantheon.LinkedData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.decomx.pantheon.RequestForFinalReviewOp.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.decomx.pantheon.RequestForFinalReviewOp} returns this
 */
proto.decomx.pantheon.RequestForFinalReviewOp.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional LinkedData comment = 2;
 * @return {?proto.decomx.pantheon.LinkedData}
 */
proto.decomx.pantheon.RequestForFinalReviewOp.prototype.getComment = function() {
  return /** @type{?proto.decomx.pantheon.LinkedData} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.LinkedData, 2));
};


/**
 * @param {?proto.decomx.pantheon.LinkedData|undefined} value
 * @return {!proto.decomx.pantheon.RequestForFinalReviewOp} returns this
*/
proto.decomx.pantheon.RequestForFinalReviewOp.prototype.setComment = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.RequestForFinalReviewOp} returns this
 */
proto.decomx.pantheon.RequestForFinalReviewOp.prototype.clearComment = function() {
  return this.setComment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.RequestForFinalReviewOp.prototype.hasComment = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LinkedData proofOfWork = 3;
 * @return {?proto.decomx.pantheon.LinkedData}
 */
proto.decomx.pantheon.RequestForFinalReviewOp.prototype.getProofofwork = function() {
  return /** @type{?proto.decomx.pantheon.LinkedData} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.LinkedData, 3));
};


/**
 * @param {?proto.decomx.pantheon.LinkedData|undefined} value
 * @return {!proto.decomx.pantheon.RequestForFinalReviewOp} returns this
*/
proto.decomx.pantheon.RequestForFinalReviewOp.prototype.setProofofwork = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.RequestForFinalReviewOp} returns this
 */
proto.decomx.pantheon.RequestForFinalReviewOp.prototype.clearProofofwork = function() {
  return this.setProofofwork(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.RequestForFinalReviewOp.prototype.hasProofofwork = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.decomx.pantheon.RecallOp.prototype.toObject = function(opt_includeInstance) {
  return proto.decomx.pantheon.RecallOp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.decomx.pantheon.RecallOp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.RecallOp.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    comment: (f = msg.getComment()) && proto.decomx.pantheon.LinkedData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.decomx.pantheon.RecallOp}
 */
proto.decomx.pantheon.RecallOp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.decomx.pantheon.RecallOp;
  return proto.decomx.pantheon.RecallOp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.decomx.pantheon.RecallOp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.decomx.pantheon.RecallOp}
 */
proto.decomx.pantheon.RecallOp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = new proto.decomx.pantheon.LinkedData;
      reader.readMessage(value,proto.decomx.pantheon.LinkedData.deserializeBinaryFromReader);
      msg.setComment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.decomx.pantheon.RecallOp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.decomx.pantheon.RecallOp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.decomx.pantheon.RecallOp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.RecallOp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getComment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.decomx.pantheon.LinkedData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.decomx.pantheon.RecallOp.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.decomx.pantheon.RecallOp} returns this
 */
proto.decomx.pantheon.RecallOp.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional LinkedData comment = 2;
 * @return {?proto.decomx.pantheon.LinkedData}
 */
proto.decomx.pantheon.RecallOp.prototype.getComment = function() {
  return /** @type{?proto.decomx.pantheon.LinkedData} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.LinkedData, 2));
};


/**
 * @param {?proto.decomx.pantheon.LinkedData|undefined} value
 * @return {!proto.decomx.pantheon.RecallOp} returns this
*/
proto.decomx.pantheon.RecallOp.prototype.setComment = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.RecallOp} returns this
 */
proto.decomx.pantheon.RecallOp.prototype.clearComment = function() {
  return this.setComment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.RecallOp.prototype.hasComment = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.decomx.pantheon.RejectOp.prototype.toObject = function(opt_includeInstance) {
  return proto.decomx.pantheon.RejectOp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.decomx.pantheon.RejectOp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.RejectOp.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    comment: (f = msg.getComment()) && proto.decomx.pantheon.LinkedData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.decomx.pantheon.RejectOp}
 */
proto.decomx.pantheon.RejectOp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.decomx.pantheon.RejectOp;
  return proto.decomx.pantheon.RejectOp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.decomx.pantheon.RejectOp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.decomx.pantheon.RejectOp}
 */
proto.decomx.pantheon.RejectOp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = new proto.decomx.pantheon.LinkedData;
      reader.readMessage(value,proto.decomx.pantheon.LinkedData.deserializeBinaryFromReader);
      msg.setComment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.decomx.pantheon.RejectOp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.decomx.pantheon.RejectOp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.decomx.pantheon.RejectOp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.RejectOp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getComment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.decomx.pantheon.LinkedData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.decomx.pantheon.RejectOp.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.decomx.pantheon.RejectOp} returns this
 */
proto.decomx.pantheon.RejectOp.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional LinkedData comment = 2;
 * @return {?proto.decomx.pantheon.LinkedData}
 */
proto.decomx.pantheon.RejectOp.prototype.getComment = function() {
  return /** @type{?proto.decomx.pantheon.LinkedData} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.LinkedData, 2));
};


/**
 * @param {?proto.decomx.pantheon.LinkedData|undefined} value
 * @return {!proto.decomx.pantheon.RejectOp} returns this
*/
proto.decomx.pantheon.RejectOp.prototype.setComment = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.RejectOp} returns this
 */
proto.decomx.pantheon.RejectOp.prototype.clearComment = function() {
  return this.setComment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.RejectOp.prototype.hasComment = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.decomx.pantheon.ApproveOp.prototype.toObject = function(opt_includeInstance) {
  return proto.decomx.pantheon.ApproveOp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.decomx.pantheon.ApproveOp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.ApproveOp.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    comment: (f = msg.getComment()) && proto.decomx.pantheon.LinkedData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.decomx.pantheon.ApproveOp}
 */
proto.decomx.pantheon.ApproveOp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.decomx.pantheon.ApproveOp;
  return proto.decomx.pantheon.ApproveOp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.decomx.pantheon.ApproveOp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.decomx.pantheon.ApproveOp}
 */
proto.decomx.pantheon.ApproveOp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = new proto.decomx.pantheon.LinkedData;
      reader.readMessage(value,proto.decomx.pantheon.LinkedData.deserializeBinaryFromReader);
      msg.setComment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.decomx.pantheon.ApproveOp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.decomx.pantheon.ApproveOp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.decomx.pantheon.ApproveOp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.ApproveOp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getComment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.decomx.pantheon.LinkedData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.decomx.pantheon.ApproveOp.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.decomx.pantheon.ApproveOp} returns this
 */
proto.decomx.pantheon.ApproveOp.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional LinkedData comment = 2;
 * @return {?proto.decomx.pantheon.LinkedData}
 */
proto.decomx.pantheon.ApproveOp.prototype.getComment = function() {
  return /** @type{?proto.decomx.pantheon.LinkedData} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.LinkedData, 2));
};


/**
 * @param {?proto.decomx.pantheon.LinkedData|undefined} value
 * @return {!proto.decomx.pantheon.ApproveOp} returns this
*/
proto.decomx.pantheon.ApproveOp.prototype.setComment = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.ApproveOp} returns this
 */
proto.decomx.pantheon.ApproveOp.prototype.clearComment = function() {
  return this.setComment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.ApproveOp.prototype.hasComment = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.decomx.pantheon.QuitOp.prototype.toObject = function(opt_includeInstance) {
  return proto.decomx.pantheon.QuitOp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.decomx.pantheon.QuitOp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.QuitOp.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    comment: (f = msg.getComment()) && proto.decomx.pantheon.LinkedData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.decomx.pantheon.QuitOp}
 */
proto.decomx.pantheon.QuitOp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.decomx.pantheon.QuitOp;
  return proto.decomx.pantheon.QuitOp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.decomx.pantheon.QuitOp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.decomx.pantheon.QuitOp}
 */
proto.decomx.pantheon.QuitOp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = new proto.decomx.pantheon.LinkedData;
      reader.readMessage(value,proto.decomx.pantheon.LinkedData.deserializeBinaryFromReader);
      msg.setComment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.decomx.pantheon.QuitOp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.decomx.pantheon.QuitOp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.decomx.pantheon.QuitOp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.decomx.pantheon.QuitOp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getComment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.decomx.pantheon.LinkedData.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 index = 1;
 * @return {number}
 */
proto.decomx.pantheon.QuitOp.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.decomx.pantheon.QuitOp} returns this
 */
proto.decomx.pantheon.QuitOp.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional LinkedData comment = 2;
 * @return {?proto.decomx.pantheon.LinkedData}
 */
proto.decomx.pantheon.QuitOp.prototype.getComment = function() {
  return /** @type{?proto.decomx.pantheon.LinkedData} */ (
    jspb.Message.getWrapperField(this, proto.decomx.pantheon.LinkedData, 2));
};


/**
 * @param {?proto.decomx.pantheon.LinkedData|undefined} value
 * @return {!proto.decomx.pantheon.QuitOp} returns this
*/
proto.decomx.pantheon.QuitOp.prototype.setComment = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.decomx.pantheon.QuitOp} returns this
 */
proto.decomx.pantheon.QuitOp.prototype.clearComment = function() {
  return this.setComment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.decomx.pantheon.QuitOp.prototype.hasComment = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.decomx.pantheon);
